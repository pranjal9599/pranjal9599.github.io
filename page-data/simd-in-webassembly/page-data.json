{"componentChunkName":"component---src-templates-blog-js","path":"/simd-in-webassembly","webpackCompilationHash":"af2a3c9b5b09e16b422c","result":{"data":{"mdx":{"frontmatter":{"title":"SIMD in WebAssembly","description":"Intro to SIMD and what it means for WebAssembly","date":"11th Feb, 2020","keywords":"WebAssembly, Javascript, SIMD"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"SIMD in WebAssembly\",\n  \"subtitle\": \"tech, hello\",\n  \"date\": \"11th Feb, 2020\",\n  \"slug\": \"simd-in-webassembly\",\n  \"author\": \"Pranjal Saxena\",\n  \"type\": \"blog\",\n  \"image\": \"first-post/images/cover.jpg\",\n  \"description\": \"Intro to SIMD and what it means for WebAssembly\",\n  \"keywords\": \"WebAssembly, Javascript, SIMD\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"WebAssembly SIMD (Single Instruction, Multiple Data) currently in development and soon will be added.\"), mdx(\"h3\", null, \"What is SIMD\"), mdx(\"p\", null, \"SIMD is an interesting concept of parallel computing and can make huge performance gains in some cases.\\nWhat essentially SIMD is instead of performing a single calculation on a single element of an array\\nor vector on single instruction it can perform calculations on multiple or all elements\\n(depending on type and size) in a single SIMD instruction.  \"), mdx(\"h3\", null, \"Areas which will have major performance gains\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Audio Processing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Video, Image Processing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Anything involving vector/tensor operations\")), mdx(\"p\", null, \"It is commonly required in image processing to \", mdx(\"b\", null, \"apply the same operation/calculation to all the pixels\"), \". Example might\\ninclude changing hue of an image where it is needed to go through all the pixels and manipulate their rgb value.\"), mdx(\"h3\", null, \"Without SIMD\"), mdx(\"undefined\", null, mdx(\"br\", null), mdx(\"img\", {\n    \"alt\": \"Without SIMD\",\n    \"src\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/6/6b/Non-SIMD_cpu_diagram1.svg/560px-Non-SIMD_cpu_diagram1.svg.png\"\n  }), mdx(\"br\", null), mdx(\"a\", {\n    \"href\": \"https://en.wikipedia.org/wiki/SIMD\"\n  }, mdx(\"cite\", {\n    parentName: \"a\"\n  }, \"(Source: SIMD Wikipedia article)\"))), mdx(\"br\", null), mdx(\"br\", null), mdx(\"h3\", null, \"With SIMD\"), mdx(\"undefined\", null, mdx(\"br\", null), mdx(\"img\", {\n    \"alt\": \"With SIMD\",\n    \"src\": \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/9b/SIMD_cpu_diagram1.svg/560px-SIMD_cpu_diagram1.svg.png\"\n  }), mdx(\"br\", null), mdx(\"a\", {\n    \"href\": \"https://en.wikipedia.org/wiki/SIMD\"\n  }, mdx(\"cite\", {\n    parentName: \"a\"\n  }, \"(Source: SIMD Wikipedia article)\"))), mdx(\"p\", null, \"Similarly in machine learning and artificial intelligence \", mdx(\"b\", null, \"vector & tensor product\"), \" are needed to be calculated and\\nSIMD can really fasten it up and improve performance by large factor.\"), mdx(\"h3\", null, \"Using SIMD with emscripten\"), mdx(\"p\", null, \"SIMD can be enabled using \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-msimd128\"), \" flag when compiling using \", mdx(\"a\", {\n    href: \"https://emscripten.org/docs/porting/simd.html\"\n  }, \"emscripten\"), \".\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"emcc -O3 -msimd128 in.c -o out.wasm\")), mdx(\"h4\", null, \"C function of example in above image:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-c\"\n  }), \"void tripleArr(int *arr, int n) {\\n    for (int i=0; i<n; i++) {\\n        arr[i] *= 3;\\n    }\\n}\\n\")), mdx(\"br\", null), mdx(\"h4\", null, \"Compiled without SIMD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"(func $1 (; 1 ;) (param $0 i32) (param $1 i32)\\n  (local $2 i32)\\n  (local $3 i32)\\n  (if\\n   (i32.gt_s\\n    (local.get $1)\\n    (i32.const 0)\\n   )\\n   (loop $label$2\\n    (i32.store\\n     (local.tee $3\\n      (i32.add\\n       (local.get $0)\\n       (i32.shl\\n        (local.get $2)\\n        (i32.const 2)\\n       )\\n      )\\n     )\\n     (i32.mul\\n      (i32.load\\n       (local.get $3)\\n      )\\n      (i32.const 3)\\n     )\\n    )\\n    (br_if $label$2\\n     (i32.ne\\n      (local.tee $2\\n       (i32.add\\n        (local.get $2)\\n        (i32.const 1)\\n       )\\n      )\\n      (local.get $1)\\n     )\\n    )\\n   )\\n  )\\n )\\n)\\n\")), mdx(\"br\", null), mdx(\"h4\", null, \"Compiled with SIMD\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {}), \"   (loop $label$3\\n      (v128.store align=4\\n       (local.tee $4\\n        (i32.add\\n         (local.get $0)\\n         (i32.shl\\n          (local.get $3)\\n          (i32.const 2)\\n         )\\n        )\\n       )\\n       (i32x4.mul\\n        (v128.load align=4\\n         (local.get $4)\\n        )\\n        (i32x4.splat\\n         (i32.const 3)\\n        )\\n       )\\n    )\\n\")), mdx(\"br\", null), mdx(\"p\", null, \"Wat in SIMD is omitted to show only main part i.e \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"v128 align=4\"), \" instructions\"), mdx(\"p\", null, \"WASM binary disassembled using \", mdx(\"a\", {\n    href: \"https://github.com/WebAssembly/binaryen\"\n  }, \"Binaryen\"), \".\"), mdx(\"br\", null), mdx(\"h3\", null, \"References & Interesting links\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://en.wikipedia.org/wiki/simd\"\n  }, \"SIMD Wikipedia article\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://youtu.be/kzrl91spspc\"\n  }, \"Oh the things you\\u2019ll compile - modern webassembly (chrome dev summit 2019)\"), \" \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://emscripten.org/docs/porting/simd.html\"\n  }, \"Porting simd code targeting webassembly\"), \" \\u2014 Emscripten docs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://v8.dev/features/simd#using-webassembly-simd\"\n  }, \"Fast, parallel applications with WebAssembly simd\"), \" \\u2014 v8 official blog\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    href: \"https://github.com/webassembly/simd\"\n  }, \"Simd proposal for webassembly\"), \" \\u2014 Github\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"simd-in-webassembly"}}}